import streamlit as st
from src.retriever import OphthalmoRetriever
from src.generator import OphthalmoGenerator
from src.ingest import DocumentIngestor
import os
import traceback

# Configuration de la page
st.set_page_config(
    page_title="RAG Ophtalmologie",
    page_icon="üëÅÔ∏è",
    layout="wide"
)

st.title("üîç Assistant RAG en Ophtalmologie")

# V√©rification de la cl√© API
if not os.getenv("GROQ_API_KEY"):
    st.error("‚ö†Ô∏è Cl√© API GROQ manquante !")
    st.info("Ajoutez votre cl√© dans le fichier .env ")
    st.stop()

# Sidebar
st.sidebar.title("Navigation")
st.sidebar.success("‚úÖ API GROQ configur√©e")

# Bouton de r√©indexation
if st.sidebar.button("üîÑ Indexer les documents"):
    with st.spinner("Indexation en cours..."):
        try:
            ingestor = DocumentIngestor()
            ingestor.ingest_all()
            st.sidebar.success("Documents index√©s !")
        except Exception as e:
            st.sidebar.error(f"Erreur d'indexation: {str(e)}")

# Statistiques de la base
try:
    retriever = OphthalmoRetriever()
    stats = retriever.get_collection_stats()
    
    if 'error' not in stats:
        st.sidebar.markdown("### üìä Statistiques")
        st.sidebar.metric("Documents totaux", stats.get('total_documents', 0))
        
        if stats.get('file_types'):
            st.sidebar.markdown("**Types de fichiers:**")
            for file_type, count in stats['file_types'].items():
                st.sidebar.text(f"‚Ä¢ {file_type}: {count}")
                
except Exception as e:
    st.sidebar.error(f"Erreur de connexion √† la base: {str(e)}")

# Interface principale
st.header("üí¨ Posez votre question")

query = st.text_area(
    "Votre question sur l'ophtalmologie:",
    placeholder="Ex: Quels sont les sympt√¥mes de la DMLA ?",
    height=100
)

# Options avanc√©es
with st.expander("üîß Options avanc√©es"):
    n_results = st.slider("Nombre de documents √† r√©cup√©rer", 5, 20, 10)
    show_debug = st.checkbox("Afficher les informations de debug", False)

if st.button("üîç Rechercher", type="primary"):
    if query.strip():
        with st.spinner("Recherche en cours..."):
            try:
                # Initialiser les composants
                if 'retriever' not in locals():
                    retriever = OphthalmoRetriever()
                generator = OphthalmoGenerator()
                
                # R√©cup√©ration avec gestion d'erreur
                retrieved_docs = retriever.retrieve(query, n_results=n_results)
                
                if show_debug:
                    st.markdown("### üîç Debug - Documents r√©cup√©r√©s")
                    for i, doc in enumerate(retrieved_docs[:5]):
                        st.markdown(f"**Doc {i+1}:** {doc['metadata'].get('source', 'Unknown')}")
                        
                        # Afficher tous les scores disponibles
                        scores_info = []
                        if 'combined_score' in doc:
                            scores_info.append(f"Score combin√©: {doc['combined_score']}")
                        if 'semantic_score' in doc:
                            scores_info.append(f"S√©mantique: {doc['semantic_score']}")
                        if 'keyword_score' in doc:
                            scores_info.append(f"Mots-cl√©s: {doc['keyword_score']}")
                        
                        st.text(" | ".join(scores_info))
                        st.text(doc['content'][:200] + "...")
                        st.divider()
                
                if retrieved_docs:
                    # G√©n√©ration
                    result = generator.generate_with_sources(query, retrieved_docs)
                    
                    # Affichage de la r√©ponse
                    st.header("üìù R√©ponse")
                    st.write(result['response'])
                    
                    # Sources avec informations d√©taill√©es
                    st.header("üìö Sources utilis√©es")
                    
                    for i, source in enumerate(result['sources']):
                        with st.expander(f"üìÑ Source {i+1}: {source['source']} (Score: {source['score']})"):
                            
                            # Informations sur la source
                            col1, col2, col3 = st.columns(3)
                            
                            with col1:
                                st.metric("Score global", source['score'])
                            
                            with col2:
                                if 'semantic_score' in source:
                                    st.metric("Score s√©mantique", source['semantic_score'])
                            
                            with col3:
                                if 'keyword_score' in source:
                                    st.metric("Score mots-cl√©s", source['keyword_score'])
                            
                            # M√©tadonn√©es suppl√©mentaires
                            metadata_info = []
                            if 'page' in source:
                                metadata_info.append(f"Page: {source['page']}")
                            if 'type' in source:
                                metadata_info.append(f"Type: {source['type']}")
                            
                            if metadata_info:
                                st.text(" | ".join(metadata_info))
                            
                            # Contenu
                            st.markdown("**Extrait:**")
                            st.code(source['preview'], language="text")

                else:
                    st.warning("‚ùå Aucun document pertinent trouv√©.")
                    st.info("üí° Essayez de reformuler votre question ou v√©rifiez que les documents sont bien index√©s.")
                    
            except Exception as e:
                st.error(f"‚ùå Erreur lors de la recherche: {str(e)}")
                
                # Afficher la stack trace compl√®te en mode debug
                if show_debug:
                    st.code(traceback.format_exc())
                
                # Suggestions de r√©solution
                st.markdown("### üîß Suggestions de r√©solution:")
                st.markdown("""
                1. **V√©rifiez la base de donn√©es**: Cliquez sur 'üîÑ Indexer les documents'
                2. **V√©rifiez les fichiers**: Assurez-vous que les dossiers `./data/pdfs` et `./data/docs` existent
                3. **V√©rifiez la configuration**: GROQ_API_KEY dans le fichier .env
                4. **R√©initialisez**: Relancez l'application
                """)
    else:
        st.warning("‚ö†Ô∏è Veuillez saisir une question.")

# Section d'aide
with st.expander("‚ÑπÔ∏è Aide et conseils"):
    st.markdown("""
    ### Comment bien utiliser l'assistant:
    
    **Questions efficaces:**
    - "Quels sont les sympt√¥mes de la DMLA ?"
    - "Comment diagnostiquer un glaucome ?"
    - "Quels traitements pour la cataracte ?"
    
    **Structure des documents:**
    - Les documents doivent √™tre dans `./data/pdfs/` (PDF) ou `./data/docs/` (DOCX/TXT)
    - R√©indexez apr√®s ajout de nouveaux documents
    
    **Scores:**
    - **Score combin√©**: Pertinence globale (0-1)
    - **Score s√©mantique**: Similarit√© du sens (0-1) 
    - **Score mots-cl√©s**: Pr√©sence des termes recherch√©s (0-1)
    """)